@extends('layouts.header_admin')
@section('css')
<link href="{{ asset('admin/css/plugins/chosen/bootstrap-chosen.css')}}" rel="stylesheet" defer>
<link href="{{ asset('admin/css/plugins/sweetalert/sweetalert.css')}}" rel="stylesheet" defer>
<link href="{{ asset('admin/css/plugins/switchery/switchery.css')}}" rel="stylesheet">
<meta name="_token" content="{{ csrf_token() }}">
<style>
    .table-disabled {
        pointer-events: none;
        opacity: 0.6;
    }
</style>
@endsection
@section('content')
<div class="row">
    <div class="col-lg-3">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <span class="label label-success pull-right">as of Today</span>
                <h5>Total Generated Payroll</h5>
            </div>
            <div class="ibox-content">
                <h1 class="no-margins">{{$payrolls->count()}}</h1>
                <small>&nbsp;</small>
            </div>
        </div>
    </div>
    <div class="col-lg-3">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <span class="label label-warning pull-right">@if($payrolls->first() != null)<small>{{date('M. d, Y', strtotime(($payrolls->first())->payroll_from))}} - {{date('M. d, Y', strtotime(($payrolls->first())->payroll_to))}}</small>@endif</span>
                <h5>Generated this cutoff</h5>
            </div>
            <div class="ibox-content">
                <h1 class="no-margins">@if($payrolls->first() != null){{count($payrolls->where('payroll_to', ($payrolls->first())->payroll_to)->where('status', ""))}}@endif</h1>
                <small>&nbsp;</small>
            </div>
        </div>
    </div>
    <div class="col-lg-3">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <span class="label label-primary pull-right">@if($payrolls->first() != null)<small>{{date('M. d, Y', strtotime(($payrolls->first())->payroll_from))}} - {{date('M. d, Y', strtotime(($payrolls->first())->payroll_to))}}</small>@endif</span>
                <h5>Active Stores</h5>
            </div>
            <div class="ibox-content">
                <h1 class="no-margins">{{count($stores)}}</h1>
                <small>&nbsp;</small>
            </div>
        </div>
    </div>
    <div class="col-lg-3">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <span class="label label-danger pull-right">@if($payrolls->first() != null)<small>{{date('M. d, Y', strtotime(($payrolls->first())->payroll_from))}} - {{date('M. d, Y', strtotime(($payrolls->first())->payroll_to))}}</small>@endif</span>
                <h5>Posted</h5>
            </div>
            <div class="ibox-content">
                <h1 class="no-margins">@if($payrolls->first() != null){{count($payrolls->where('payroll_to', ($payrolls->first())->payroll_to)->where('status', '!=', ''))}}@endif</h1>
                <small>&nbsp;</small>
            </div>
        </div>
    </div>
</div>
<div class='row'>
    <div class="col-lg-12 grid-margin stretch-card">
        <div class="ibox float-e-margins">
            <div class="ibox-content">
                <div class="table-responsive position-relative">
                    <div class="d-flex justify-content-end mb-2">
                        <button type="button" class="btn btn-primary" id="updateRecordsButton">Update Records</button>
                    </div>
                    <div id="loadingOverlay" class="loading-overlay position-absolute"
                        style="display:none; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255, 255, 255, 0.7); z-index: 10; justify-content: center; align-items: center;">
                        <div class="loading-message text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <div class="progress mt-3" style="width: 100%;">
                                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                                    style="width: 0%;">0%</div>
                            </div>
                        </div>
                    </div>
                    <table class="table table-striped table-bordered table-hover home-payroll" id="payrollTable">
                        <thead>
                            <tr>
                                <th>Action</th>
                                <th>Company</th>
                                <th>Store</th>
                                <th>Generated By</th>
                                <th>Created At</th>
                                <th>Cut Off</th>
                                <th>Employee Count</th>
                                <th>Total Basic Pay</th>
                                <th>Contributions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($payrolls as $payroll)
                            @php
                                $userId = auth()->user()->id;
                                $shouldDisplay = false;
                                $storeName = $payroll->store;
                                if (($userId == 1 && strpos($storeName, 'Inhouse') === false && strpos($storeName, 'Star Terran') !== 0) || 
                                    ($userId == 2 && (strpos($storeName, 'Inhouse') !== false || strpos($storeName, 'Star Terran') === 0)) || 
                                    ($userId != 1 && $userId != 2)) {
                                    $shouldDisplay = true;
                                }
                                $displayRatesMessage = false;
                                foreach ($payroll->informations as $info) {
                                    if ($info->source == "No Rates") {
                                        $displayRatesMessage = true;
                                        break;
                                    }
                                }
                            @endphp
                            @if($shouldDisplay)
                                <tr data-payroll='@json($payroll)'>
                                    <td>
                                        @php
                                            $disableButtons = false;
                                            foreach ($payroll->informations as $info) {
                                                if ($info->source == "No Rates") {
                                                    $disableButtons = true;
                                                    break;
                                                }
                                            }
                                        @endphp
                                        @if($payroll->status == "")
                                            @if($disableButtons)
                                                <a title='Delete Payroll' class='delete-payroll' id='{{ $payroll->id }}'>
                                                    <button type="button" class="btn btn-danger btn-icon btn-sm">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </a>
                                                <button type="button" class="btn btn-primary btn-icon btn-sm set-rates" data-store="{{ $payroll->store }}" data-toggle="tooltip" title="Set Rates">
                                                    <i class="fa fa-cog"></i>
                                                </button>
                                            @else
                                                <a title='Edit Payroll' href='{{ url("edit-payroll/" . $payroll->id) }}'>
                                                    <button type="button" class="btn btn-success btn-icon btn-sm">
                                                        <i class="fa fa-edit"></i>
                                                    </button>
                                                </a>
                                                <a title='Delete Payroll' class='delete-payroll' id='{{ $payroll->id }}'>
                                                    <button type="button" class="btn btn-danger btn-icon btn-sm">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </a>
                                                <a title='Save Payroll' class='save-payroll' id='{{ $payroll->id }}'>
                                                    <button type="button" class="btn btn-warning btn-icon btn-sm">
                                                        <i class="fa fa-save"></i>
                                                    </button>
                                                </a>
                                            @endif
                                        @else
                                            @if($payroll->display == 0)
                                                <a title='Display Payslip' href='{{ url("display/" . $payroll->id) }}'>
                                                    <button type="button" class="btn btn-success btn-icon btn-sm">
                                                        <i class="fa fa-exchange"></i>
                                                    </button>
                                                </a>
                                            @else
                                                <a title='Remove Payslip' href='{{ url("display/" . $payroll->id) }}'>
                                                    <button type="button" class="btn btn-success btn-icon btn-sm">
                                                        <i class="fa fa-minus-square"></i>
                                                    </button>
                                                </a>
                                            @endif
                                            <a title='Print Payroll' href='{{ url("payroll/" . $payroll->id) }}' target="_blank">
                                                <button type="button" class="btn btn-danger btn-icon btn-sm">
                                                    <i class="fa fa-file-pdf-o"></i>
                                                </button>
                                            </a>
                                            <a title='Print Billing' href='{{ url("billing/" . $payroll->id) }}' target="_blank">
                                                <button type="button" class="btn btn-info btn-icon btn-sm">
                                                    <i class="fa fa-file-pdf-o"></i>
                                                </button>
                                            </a>
                                        @endif
                                    </td>
                                    <td>{{ $payroll->company ?? 'N/A' }}</td>
                                    <td>{{ $payroll->store ?? 'N/A' }}</td>
                                    <td>
                                        @if($payroll->generated_by)
                                            {{ optional($payroll->user)->name ?? 'N/A' }}
                                        @else
                                            {{ $payroll->generated_by_name ?? 'N/A' }}
                                        @endif
                                    </td>
                                    <td>{{ date('M d, Y', strtotime($payroll->created_at)) }}</td>
                                    <td>{{ date('M d, Y', strtotime($payroll->payroll_from)) }} -
                                        {{ date('M d, Y', strtotime($payroll->payroll_to)) }}</td>
                                    <td>{{ count($payroll->informations) }}</td>
                                    <td>{{ $displayRatesMessage ? 'Please Set Rates' : number_format((($payroll->informations)->sum('basic_pay')), 2) }}</td>
                                    <td>
                                        <small>
                                            SSS : {{ number_format((($payroll->informations)->sum('sss_contribution')), 2) }} <br>
                                            HDMF : {{ number_format((($payroll->informations)->sum('hdmf_contribution')), 2) }} <br>
                                            NHIP : {{ number_format((($payroll->informations)->sum('nhip_contribution')), 2) }}
                                        </small>
                                    </td>
                                </tr>
                            @endif
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="edit_rates" tabindex="-1" role="dialog" aria-labelledby="EditRatesData" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class='row'>
                    <div class='col-md-12'>
                        <h5 class="modal-title" id="EditHoldayData"></h5>
                    </div>
                </div>
            </div>
            <form id="editRatesForm" method='POST' action='{{ route("edit-store-rates") }}' onsubmit='show()'>
                <div class="modal-body">
                    {{ csrf_field() }}
                    <input type="hidden" name="status" value="2" placeholder='status' class="form-control status" required>
                    <input type="hidden" name="rateid" placeholder='status' class="form-control rateid" required>
                    <input type="hidden" name="store" placeholder='status' class="form-control store" required>
                    
                    <label >Lates:</label>
                    <input type="checkbox" class="js-switch form-control late" name='late'  checked/>
                    <label >Undertime:</label>
                    <input type="checkbox" class="js-switch_2 form-control undertime" name='undertime' checked /> <br>
                    <label>Daily Rate:</label>
                    <input type="text" name="dailyRate" placeholder='Holiday Name' class="form-control dailyRate" required>
                    <label>Holiday Rate:</label>
                    <input type="text" name="holidayRate" placeholder='Holiday Name' class="form-control holidayRate" required>
                    <label>Holiday OT Rate:</label>
                    <input type="text" name="holidayot" placeholder='Holiday Name' class="form-control holidayot" required>
                    <label>Holiday Rest Day Rate:</label>
                    <input type="text" name="holidayrestday" placeholder='Holiday Name' class="form-control holidayRestDay" required>
                    <label>Holiday Rest Day OT Rate:</label>
                    <input type="text" name="holidayrestdayot" placeholder='Holiday Name' class="form-control holidayRestDayOt" required>
                    <label>Nightshift Rate:</label>
                    <input type="text" name="nightshift" placeholder='Holiday Name' class="form-control nightshift" required>
                    <label>Overtime Rate:</label>
                    <input type="text" name="overtime" placeholder='Holiday Name' class="form-control overtime" required>
                    <label>SSS Rate:</label>
                    <input type="text" name="sss" placeholder='Holiday Name' class="form-control sss" required>
                    <label>Pag-ibig Rate:</label>
                    <input type="text" name="pagibig" placeholder='Holiday Name' class="form-control pagibig" required>
                    <label>Philhealth Rate:</label>
                    <input type="text" name="philhealth" placeholder='Holiday Name' class="form-control philhealth" required>
                    <label>Rest Day Duty Rate:</label> 
                    <input type="text" name="restday" placeholder='Holiday Name' class="form-control restday" required>
                    <label>Rest Day OT Rate:</label>
                    <input type="text" name="restdayot" placeholder='Holiday Name' class="form-control restdayot" required>
                    <label>Special Holiday Rate:</label>
                    <input type="text" name="specialholiday" placeholder='Holiday Name' class="form-control specialholiday" required>
                    <label>Special Holiday OT Rate:</label>
                    <input type="text" name="specialholidayot" placeholder='Holiday Name' class="form-control specialholidayot" required>
                    <label>Special Holiday RD Rate:</label>
                    <input type="text" name="specialholidayrestday" placeholder='Holiday Name' class="form-control specialholidayrestday" required>
                    <label>Special Holiday RD OT Rate:</label>
                    <input type="text" name="specialholidayrestdayot" placeholder='Holiday Name' class="form-control specialholidayrestdayot" required>
                    <label>Allowance:</label>
                    <input type="text" name="allowance" placeholder='Allowance' class="form-control allowance" required>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" id='submit1' class="btn btn-primary">Save</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@endsection
@section('js')
<script src="{{ asset('admin/js/plugins/chosen/chosen.jquery.js')}}"></script>
<script src="{{ asset('admin/js/inspinia.js')}}"></script>
<script src="{{ asset('admin/js/plugins/pace/pace.min.js')}}"></script>
<script src="{{ asset('admin/js/plugins/sweetalert/sweetalert.min.js')}}"></script>
<script src="{{ asset('admin/js/plugins/switchery/switchery.js')}}"></script>
<script>
    $(document).ready(function() {
        if (window.location.pathname.includes('/payrolls')) {
            $('#updateRecordsButton').show().prop('disabled', false); 
        } else {
            $('#updateRecordsButton').hide();
        }
        $('[data-toggle="tooltip"]').tooltip();
        $('.delete-payroll').click(function () {
            var id = this.id;
            var payrollData = $(this).closest('tr').data('payroll');
            console.log('Delete payroll ID:', id);
            console.log('Payroll data:', payrollData);

            swal({
                title: "Are you sure?",
                text: "You will not be able to recover this payroll",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: false
            }, function () {
                if (payrollData.breaklist) {
                    console.log('Breaklist:', payrollData.breaklist);
                    $.ajax({
                        dataType: 'json',
                        type: 'POST',
                        url: 'https://time-in-production-api.onrender.com/api/delete/breaklist',
                        data: JSON.stringify({ breaklistid: payrollData.breaklist }),
                        contentType: 'application/json',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }).always(function(breaklistData) {
                        console.log('Breaklist delete response:', breaklistData);
                        var breaklistMessage = 'Your record has been deleted, but the breaklist could not be deleted.';
                        if (breaklistData.success) {
                            breaklistMessage = 'Your record and breaklist have been deleted.';
                        }
                        $.ajax({
                            dataType: 'json',
                            type: 'POST',
                            url: '{{url("delete-payroll")}}',
                            data: { id: id },
                            headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
                        }).done(function(data) {
                            console.log('Delete response:', data);
                            swal("Deleted!", breaklistMessage, "success");
                            location.reload();
                        }).fail(function(data) {
                            console.log('Delete failed response:', data);
                            swal("Deleted!", breaklistMessage, "success");
                            location.reload();
                        });
                    });
                } else {
                    $.ajax({
                        dataType: 'json',
                        type: 'POST',
                        url: '{{url("delete-payroll")}}',
                        data: { id: id },
                        headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
                    }).done(function(data) {
                        console.log('Delete response:', data);
                        swal("Deleted!", "Your record has been deleted.", "success");
                        location.reload();
                    }).fail(function(data) {
                        console.log('Delete failed response:', data);
                        swal("Deleted!", "Your record has been deleted.", "success");
                        location.reload();
                    });
                }
            });
        });

        $('.save-payroll').click(function () {
            var id = this.id;
            var payrollData = $(this).closest('tr').data('payroll');
            console.log('Save payroll ID:', id);
            console.log('Payroll data:', payrollData);

            swal({
                title: "Are you sure to save this payroll?",
                text: "After saving, you cannot edit this payroll anymore",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "Yes, save it!",
                closeOnConfirm: false
            }, function () {
                $.ajax({
                    dataType: 'json',
                    type: 'POST',
                    url: '{{url("save-payroll")}}',
                    data: { id: id },
                    headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
                }).done(function(data) {
                    console.log('Save response:', data);
                    swal("Saved!", "Successfully Saved.", "success");
                    location.reload();
                }).fail(function(data) {
                    console.log('Save failed response:', data);
                    swal("Saved!", "Successfully Saved.", "success");
                    location.reload();
                });
            });
        });
        var elem = document.querySelector('.js-switch');
        var switchery = new Switchery(elem, { color: '#1AB394' });
        var elem = document.querySelector('.js-switch_2');
        var switchery = new Switchery(elem, { color: '#1AB394' });

        $('.chosen-select').chosen({width: "100%"});

        $('.set-rates').click(async function() {
            let store = $(this).data('store');
            let payrollId = $(this).closest('tr').find('.delete-payroll').attr('id'); // Grabs the payroll ID from the delete button
            let url = 'rates';
            if (store) {
                const data = { "store": store };
                const option = {
                    method: "POST",
                    headers: {
                        "Accept": '*',
                        "Content-Type": "application/json",
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    },
                    body: JSON.stringify(data)
                };
                const response = await fetch(url, option);
                const d = await response.json();
                if (d.status === "success") {
                    $('.modal-title').text(store + " STORE RATES");
                    $('.dailyRate').val(d.data.daily);
                    $('.rateid').val(0);
                    $('.holidayRate').val(d.data.holiday);
                    $('.holidayot').val(d.data.holidayot);
                    $('.holidayRestDay').val(d.data.holidayrestday);
                    $('.holidayRestDayOt').val(d.data.holidayrestdayot);
                    $('.nightshift').val(d.data.nightshift);
                    $('.overtime').val(d.data.overtime);
                    $('.sss').val(d.data.sss);
                    $('.pagibig').val(d.data.pagibig);
                    $('.philhealth').val(d.data.philhealth);
                    $('.restday').val(d.data.restday);
                    $('.restdayot').val(d.data.restdayot);
                    $('.specialholiday').val(d.data.specialholiday);
                    $('.specialholidayot').val(d.data.specialholidayot);
                    $('.specialholidayrestday').val(d.data.specialholidayrestday);
                    $('.specialholidayrestdayot').val(d.data.specialholidayrestdayot);
                    $('.store').val(store);
                    $('.allowance').val(d.data.allowance);
                    if (d.data.late == null) {
                        $('.late').prop('checked', true);
                    }
                    if (d.data.undertime == null) {
                        $('.undertime').prop('checked', true);
                    }
                    $('.switchery-default').remove();
                    var elem = document.querySelector('.js-switch');
                    var switchery = new Switchery(elem, { color: '#1AB394' });
                    var elem = document.querySelector('.js-switch_2');
                    var switchery = new Switchery(elem, { color: '#1AB394' });
                    $(`#edit_rates`).modal().show();

                    $('#editRatesForm').on('submit', async function(e) {
                        e.preventDefault();

                        const formData = new FormData(this);
                        let setRatesUrl = '{{ route("edit-store-rates") }}';
                        const setRatesOption = {
                            method: "POST",
                            headers: {
                                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                            },
                            body: formData
                        };
                        const setRatesResponse = await fetch(setRatesUrl, setRatesOption);
                        if (setRatesResponse.ok) {

                            const setRatesText = await setRatesResponse.text();
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(setRatesText, 'text/html');
                            const message = doc.body.innerText.includes('Save successful!') ? 'Save successful!' : '';

                            const setRatesData = { message: message };

                            if (setRatesData.message === "Save successful!") {
                                console.log("Store rates set successfully");

                                let deleteUrl = '{{url("delete-payroll")}}';
                                const deleteOption = {
                                    method: "POST",
                                    headers: {
                                        "Accept": '*',
                                        "Content-Type": "application/json",
                                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                                    },
                                    body: JSON.stringify({ id: payrollId })
                                };
                                const deleteResponse = await fetch(deleteUrl, deleteOption);
                                if (deleteResponse.ok) {
                                    const deleteData = await deleteResponse.text();
                                    if (deleteData.trim() === "success") {
                                        console.log("Payroll deleted successfully");
                                        alert("Rates set successfully. Please Update Records again to update payroll with new Rates");
                                        location.reload();
                                    } else {
                                        alert("Something went wrong, please contact admin");
                                    }
                                } else {
                                    alert("Something went wrong, please contact admin");
                                }
                            } else {
                                alert("Failed to set store rates. Please contact admin.");
                            }
                        } else {
                            alert("Failed to set store rates. Please contact admin.");
                        }
                    });
                } else {
                    alert("Something went wrong please contact admin");
                }
            } else {
                alert("Please select store");
            }
        });

        $('#updateRecordsButton').click(function () {
        var userId = parseInt("{{ auth()->user()->id }}");
        var settings = {
            "url": "https://sparkle-time-keep.herokuapp.com/api/list/breaklistapproved",
            "method": "POST",
            "timeout": 0,
            "headers": {
                "Content-Type": "application/json"
            },
            "data": JSON.stringify({
                "payroll": userId,
            }),
        };

        $.ajax(settings).done(function (response) {
            console.log('Fetched data:', response);
            if (response.success) {
                var newPayrolls = response.data;

                // Prepare data for batch check
                var payrollsToCheck = newPayrolls.map(payroll => ({
                    payroll_from: new Date(payroll.datefrom).toISOString().split('T')[0],
                    payroll_to: new Date(payroll.dateto).toISOString().split('T')[0],
                    store: payroll.store
                }));

                function fetchExistingPayrolls(payrollsToCheck) {
                    return new Promise((resolve, reject) => {
                        $.ajax({
                            url: '{{ url("batch-check-existing-payrolls") }}',
                            method: 'POST',
                            data: {
                                payrolls: payrollsToCheck,
                                _token: $('meta[name="csrf-token"]').attr('content')
                            },
                            success: function(response) {
                                resolve(response.non_existing_payrolls);
                            },
                            error: function(error) {
                                console.error('Error fetching existing payrolls:', error);
                                reject(error);
                            }
                        });
                    });
                }

                // Perform batch check for existing payrolls
                fetchExistingPayrolls(payrollsToCheck).then(function(nonExistingPayrolls) {
                    var filteredPayrolls = newPayrolls.filter(payroll => {
                        var dateFrom = new Date(payroll.datefrom).toISOString().split('T')[0];
                        var dateTo = new Date(payroll.dateto).toISOString().split('T')[0];
                        return nonExistingPayrolls.some(nonExist => nonExist.store === payroll.store && nonExist.payroll_from === dateFrom && nonExist.payroll_to === dateTo);
                    });

                    console.log('Filtered Payrolls:', filteredPayrolls);

                    var totalEmployees = filteredPayrolls.reduce((sum, payroll) => {
                        return sum + payroll.details.length;
                    }, 0);

                    var processedEmployees = 0;

                    $('#loadingOverlay').show();
                    $('#updateRecordsButton').prop('disabled', true).text('Updating Records...');
                    $('#payrollTable').addClass('table-disabled');

                    function fetchHolidays() {
                        return new Promise((resolve, reject) => {
                            $.ajax({
                                url: `{{url("holidays")}}`,
                                method: 'GET',
                                contentType: 'application/json',
                                dataType: 'html',
                                headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
                            }).done(function(holidaysResponse) {
                                var $html = $(holidaysResponse);

                                var holidays = [];
                                $html.find('tr').each(function () {
                                    var $row = $(this);
                                    var holiday = {
                                        date: $row.find('td').eq(0).text().trim(),
                                        name: $row.find('td').eq(1).text().trim(),
                                        type: $row.find('td').eq(2).text().trim()
                                    };
                                    if (holiday.date && holiday.name && holiday.type) {
                                        holidays.push(holiday);
                                    }
                                });

                                resolve(holidays);
                            }).fail(function(error) {  
                                console.error('Failed to fetch holidays:', error);
                                reject(error);  
                            });
                        });
                    }

                    function fetchRates(detail) {
                        let employeeId = detail.employeeid;
                        let store = detail.store;

                        return new Promise((resolve, reject) => {
                            $.ajax({
                                dataType: 'json',
                                type: 'GET',
                                url: `{{url("rates-stk")}}/${employeeId}?store=${store}`,
                                headers: { 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
                            }).done(function(data) {
                                resolve(data);
                            }).fail(function(error) {
                                reject(error);
                            });
                        });
                    }

                    fetchHolidays().then(function (holidays) {
                        var payrollSavePromises = [];

                        filteredPayrolls.forEach(function (payroll) {
                            var dateFrom = new Date(payroll.datefrom).toISOString().split('T')[0];
                            var dateTo = new Date(payroll.dateto).toISOString().split('T')[0];

                            payroll.details.sort(function(a, b) {
                                var nameA = a.employeename.toUpperCase();
                                var nameB = b.employeename.toUpperCase();
                                return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;
                            });

                            var detailsPromises = payroll.details.map(detail => {
                                return fetchRates(detail).then(rateResponse => {
                                    if (rateResponse.status === 'success') {
                                        var rate = rateResponse.data;
                                        var hourlyRate = rate.daily / 8;
                                        var workingHours = (typeof detail.hourswork === 'string' && detail.hourswork.toLowerCase() === "absent") 
                                            ? 0 
                                            : detail.hourswork > 0 
                                                ? detail.hourswork 
                                                : 0;
                                        var tardyRate = (rate.late === 1) ? 0 : (rate.daily / 8 / 60) * detail.hourstardy;
                                        var overtimeRate = (hourlyRate * 1.25) * detail.overtime;
                                        var restDayRate = detail.restday ? (hourlyRate * .3) * detail.restday : 0;
                                        
                                        var specialHolidayCount = 0;
                                        var legalHolidayCount = 0;

                                        holidays.forEach(function (holiday) {
                                            var holidayDate = holiday.date.replace(/\./g, '-'); 
                                            if (holidayDate >= dateFrom && holidayDate <= dateTo) {
                                                if (holiday.type === "Special Holiday") {
                                                    specialHolidayCount++;
                                                } else {
                                                    legalHolidayCount++;
                                                }
                                            }
                                        });

                                        var specialHolidayRate = (rate.daily * .3) * (detail.specialholiday || specialHolidayCount);
                                        var legalHolidayRate = rate.daily * (detail.legalholiday || legalHolidayCount);
                                        var nightdiffRate = (hourlyRate * .1) * detail.nightdiff;

                                        var pagibigRate = rate.pagibig === 0 || rate.pagibig == null ? 200 : rate.pagibig;
                                        var philhealthRate = rate.philhealth;
                                            
                                        if (payroll.cutoff !== undefined && payroll.cutoff === 2) {
                                            pagibigRate = 0;
                                            philhealthRate = 0;
                                        }

                                        processedEmployees++;
                                        var progressPercent = Math.round((processedEmployees / totalEmployees) * 100);
                                        $('#progressBar').css('width', progressPercent + '%').text(progressPercent + '%');

                                        return {
                                            employeeid: detail.employeeid,
                                            employeename: detail.employeename,
                                            rate: rate.daily,
                                            daily_rate: rate.daily,
                                            hour_rate: hourlyRate,
                                            days_work: detail.dayswork,
                                            hours_work: workingHours,
                                            basic_pay: rate.daily * detail.dayswork,
                                            hours_tardy: detail.hourstardy,
                                            tardy_amount: tardyRate,
                                            overtime: detail.overtime,
                                            overtime_amount: overtimeRate,
                                            restdays_work: detail.restday,
                                            restday_amount: restDayRate,
                                            special_holiday: detail.specialholiday || specialHolidayCount,
                                            special_holiday_amount: specialHolidayRate,
                                            legal_holiday: detail.legalholiday || legalHolidayCount,
                                            legal_holiday_amount: legalHolidayRate,
                                            night_diff: detail.nightdiff,
                                            nightdiff_amount: nightdiffRate,
                                            gross_pay: (rate.daily * detail.dayswork) - tardyRate + overtimeRate + specialHolidayRate + legalHolidayRate + nightdiffRate + restDayRate,
                                            other_income_non_tax: 0,
                                            sss: rate.sss,
                                            philhealth: philhealthRate,
                                            pagibig: pagibigRate,
                                            total_deduction: rate.sss + philhealthRate + pagibigRate,
                                            other_deduction: 0,
                                            net: (rate.daily * detail.dayswork) - tardyRate + overtimeRate + specialHolidayRate + legalHolidayRate + nightdiffRate + restDayRate - (rate.sss + philhealthRate + pagibigRate),
                                            sss_er: rate.sss,
                                            source: rateResponse.source
                                        };
                                    } else {
                                        console.error('Failed to fetch rates for employee:', detail.employeeid);
                                        return null;
                                    }
                                });
                            });

                            payrollSavePromises.push(Promise.all(detailsPromises).then(function (details) {
                                details = details.filter(detail => detail !== null);

                                if (!payrollExists(payroll.store, dateFrom, dateTo)) {
                                    var payload = {
                                        store: payroll.store,
                                        cutoff: payroll.cutoff,
                                        from: dateFrom,
                                        to: dateTo,
                                        employeecount: payroll.employeecount,
                                        generatedby: isNaN(payroll.generatedby) ? null : payroll.generatedby,
                                        generatedbyname: isNaN(payroll.generatedby) ? payroll.generatedby : null,
                                        breaklistid: payroll.breaklistid,
                                        createdat: new Date(payroll.createdAt).toISOString().split('T')[0],
                                        details: details
                                    };

                                    return $.ajax({
                                        url: '{{ route("save-payroll") }}',
                                        method: 'POST',
                                        contentType: 'application/json',
                                        data: JSON.stringify(payload),
                                        headers: {
                                            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                                        }
                                    });
                                } else {
                                    return Promise.resolve();
                                }
                            }));
                        });

                        Promise.all(payrollSavePromises).then(function () {
                            console.log('All payrolls saved successfully');
                            $('#loadingOverlay').hide();
                            $('#updateRecordsButton').prop('disabled', false).text('Update Records');
                            $('#payrollTable').removeClass('table-disabled');
                            location.reload();
                        }).catch(function (error) {
                            console.error('Error saving some payrolls:', error);
                            $('#loadingOverlay').hide();
                            $('#updateRecordsButton').prop('disabled', false).text('Update Records');
                            $('#payrollTable').removeClass('table-disabled');
                        });
                    }).catch(function (error) {
                        console.error('Failed to fetch holidays:', error);
                        $('#loadingOverlay').hide();
                        $('#updateRecordsButton').prop('disabled', false).text('Update Records');
                        $('#payrollTable').removeClass('table-disabled');
                    });
                });
            }
        });
    });
});

function payrollExists(store, dateFrom, dateTo) {
    var existingPayrolls = @json($payrolls);
    return existingPayrolls.some(function (payroll) {
        return payroll.store === store &&
            new Date(payroll.payroll_from).toISOString().split('T')[0] === dateFrom &&
            new Date(payroll.payroll_to).toISOString().split('T')[0] === dateTo;
    });
}
</script>
@endsection